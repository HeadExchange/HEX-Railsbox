---
- hosts: 'all'
  remote_user: 'root'

  # В данном блоке объявляются переменные, которые будут использоваться в playbook и конфигах, представленных выше
  vars:
    # Версия ruby
    ruby_version: '2.2.2'
    user: 'vagrant'
    # Домашняя директория
    home: '/home/{{ user }}'
    # Директория установки Rbenv
    rbenv_root: '{{ home }}/.rbenv'

  # Список задач, которые будут выполнены последовательно
  tasks:
    - name: add node repo
      apt_repository: repo=ppa:chris-lea/node.js

    - name: install node packages
      apt: name=nodejs state=latest update_cache=yes

    - name: 'apt | install dependencies'
      apt: 'name={{ item }} state=latest update_cache=yes'
      # with_items - это обычный цикл в Ansible, он возьмёт и прогонит все его элементы через action
      with_items:
        - 'git-core'
        - 'curl'
        - 'zlib1g-dev'
        - 'libssl-dev'
        - 'libreadline-dev'
        - 'libyaml-dev'
        - 'libsqlite3-dev'
        - 'sqlite3'
        - 'libxml2-dev'
        - 'libxslt1-dev'
        - 'libcurl4-openssl-dev'
        - 'python-software-properties'
        - 'libffi-dev'
        - 'language-pack-ru'
        - 'redis-server'
        - 'postgresql'
        - 'postgresql-contrib'
        - 'libpq-dev'
        - 'imagemagick'
        - 'libmagickwand-dev'
        - 'nodejs'
        - build-essential
        - libmysqlclient-dev
        - libsqlite3-dev
        - libssl-dev
        - libc6-dev
        - libyaml-dev

    # Устанавливаем ruby-build, rbenv, bundler (шаги взяты из инструкции к установке rbenv)
    - name: 'rbenv | clone repo'
      git: 'repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} accept_hostkey=yes'

    - name: 'rbenv | check ruby-build installed'
      command: 'test -x {{ rbenv_root }}/plugins/ruby-build'
      # Мы проверяем, установлен ли ruby-build и регистрируем событие plugin_installed,
      # а затем выполняем все остальные шаги, которые не были изменены при следующем прогоне плейбука
      register: 'plugin_installed'
      ignore_errors: yes

    - name: 'rbenv | add bin to path'
      shell: echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | init'
      shell: echo 'eval "$(rbenv init -)"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | clone ruby-build repo'
      git: 'repo=git://github.com/sstephenson/ruby-build.git dest={{ rbenv_root }}/plugins/ruby-build accept_hostkey=yes'
      when: 'plugin_installed|failed'

    - name: 'rbenv | check ruby {{ ruby_version }} installed'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv versions | grep {{ ruby_version }}'
      register: 'ruby_installed'
      ignore_errors: yes

    - name: 'rbenv | install ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv install {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | set global ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv global {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | rehash'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv rehash'
      when: 'ruby_installed|failed'

    - name: 'rbenv | create .gemrc'
      lineinfile: 'dest={{ home }}/.gemrc owner={{ user }} group={{ user }} mode=0644 line="gem: --no-ri --no-rdoc" create=yes'
      when: 'ruby_installed|failed'

    - name: 'ruby | install bundler'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv exec gem install bundler'
      when: 'ruby_installed|failed'

    # Устанавливаем posgresql, создаём пользователя, копируем конфиги и создаём конечную базу данных
#    - name: 'postgresql | check user'
#      shell: 'psql -U postgres -c "\copyright"'
#      register: 'postgres_login'
#      ignore_errors: yes
#
#    - name: 'postgresql | set auth type'
#      copy: 'src=configs/pg_hba.conf dest=/etc/postgresql/9.3/main/pg_hba.conf owner=postgres group=postgres mode=0644'
#      when: 'postgres_login|failed'
#
#    - name: 'postgresql | restart service'
#      service: name=postgresql state=restarted
#      when: 'postgres_login|failed'
#
#    - name: 'postgresql | create shared directory'
#      shell: 'mkdir -p {{ application }}/shared/config -m 775 && chown -R {{ user }}:{{ user }} {{ home }}/applications'
#      when: 'postgres_login|failed'
#
#    - name: 'postgresql | create database'
#      shell: 'createdb -U postgres -O postgres -E UTF8 -l en_US.UTF-8 {{ name }}_production'
#      when: 'postgres_login|failed'
