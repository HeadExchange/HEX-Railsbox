---
- hosts: 'all'
  remote_user: 'root'
  gather_facts: no

  vars_prompt:
    - name: 'ruby_version'
      prompt: 'Ruby version'
      default: '3.2.4'
      private: no
    - name: 'name'
      prompt: "Application name (one-word, can use '_' symbol)"
      default: 'adc2024'
      private: no
    - name: 'domain'
      prompt: 'Site domain'
      default: '81.177.48.90'
      private: no
    - name: 'swapfile_size'
      prompt: 'Swapfile Size'
      default: '1G'
      private: no

  vars:
    user: 'deployer'
    home: '/home/{{ user }}'
    rbenv_root: '{{ home }}/.rbenv'
    application: '{{ home }}/apps/{{ name }}'
    swapfile_location: /swapfile
    swapfile_use_dd: False

  tasks:
    - name: 'ssh | set keep alive settings'
      shell: |
        echo '  ServerAliveInterval 60' >> /etc/ssh/ssh_config
        echo '  ServerAliveCountMax 30' >> /etc/ssh/ssh_config

    - name: 'ssh | restart ssh service'
      shell: 'systemctl restart ssh'

    # ====================================================
    # Swapfile
    # ====================================================
    - name: Write swapfile
      command: |
        {% if swapfile_use_dd %}
        dd if=/dev/zero of={{ swapfile_location }} bs=1M count={{ swapfile_size }} creates={{ swapfile_location }}
        {% else %}
        fallocate -l {{ swapfile_size }} {{ swapfile_location }} creates={{ swapfile_location }}
        {% endif %}
      register: write_swapfile
      when: swapfile_size != false

    - name: Set swapfile permissions
      file: path={{ swapfile_location }} mode=600
      when: swapfile_size != false

    - name: Create swapfile
      command: mkswap {{ swapfile_location }}
      register: create_swapfile
      when: swapfile_size != false and write_swapfile.changed

    - name: Enable swapfile
      command: swapon {{ swapfile_location }}
      when: swapfile_size != false and create_swapfile.changed

    - name: Add swapfile to /etc/fstab
      lineinfile: dest=/etc/fstab line="{{ swapfile_location }}   none    swap    sw    0   0" state=present
      when: swapfile_size != false

    - name: Configure vm.swappiness
      sysctl:
        name: vm.swappiness
        value: 10
        state: present
        reload: true

    - name: Configure vm.vfs_cache_pressure
      sysctl:
        name: vm.vfs_cache_pressure
        value: 50
        state: present
        reload: true

    # ====================================================
    # Ubuntu update and packages installation
    # ====================================================
    - name: 'apt | update'
      action: 'apt update_cache=yes'

    - name: 'apt | install dependencies'
      apt:
        pkg:
          - build-essential
          - libyaml-dev
          - libreadline6-dev
          - zlib1g-dev
          - curl
          - git
          - nginx
          - redis-server
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - imagemagick
          - libmagickwand-dev
          - nodejs
          - node-gyp
          - npm
          - yarn
          - htop
          - mc
        state: present

    # ====================================================
    # Set yarn and npm globally
    # ====================================================
    - name: 'yarn | install globally'
      shell: 'npm install yarn -g'

    - name: 'npm cache clean'
      shell: 'sudo npm cache clean -f'

    - name: 'npm install n'
      shell: 'sudo npm install -g n'

    - name: 'upgrade node'
      shell: 'sudo n stable'

    # ====================================================
    # Create and setup a deployer user
    # ====================================================
    - name: 'account | create'
      user: 'name={{ user }} shell=/bin/bash'

    - name: 'account | copy authorized keys'
      shell: 'mkdir -p {{ home }}/.ssh -m 700 && cp /root/.ssh/authorized_keys {{ home }}/.ssh && chown -R {{ user }}:{{ user }} {{ home }}/.ssh'

    - name: 'account | copy ssh public key'
      authorized_key: user={{ user }} key="{{ lookup('file', 'keys/id_rsa.pub') }}"

    # ====================================================
    # rbenv, ruby-build and ruby setup
    # ====================================================
    - name: 'rbenv | check rbenv installed'
      command: 'test -x {{ rbenv_root }}'
      register: 'rbenv_installed'
      ignore_errors: yes

    - name: 'rbenv | clone repo'
      git:
        repo: 'https://github.com/rbenv/rbenv.git'
        dest: '{{ rbenv_root }}'
        accept_hostkey: yes
      when: 'rbenv_installed is failed'

    - name: 'rbenv | check ruby-build installed'
      command: 'test -x {{ rbenv_root }}/plugins/ruby-build'
      register: 'plugin_installed'
      ignore_errors: yes

    - name: 'rbenv | add bin to path'
      shell: echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> {{ home }}/.bashrc
      when: 'plugin_installed is failed'

    - name: 'rbenv | init'
      shell: echo 'eval "$(rbenv init -)"' >> {{ home }}/.bashrc
      when: 'plugin_installed is failed'

    - name: 'rbenv | clone ruby-build repo'
      git:
        repo: 'https://github.com/rbenv/ruby-build.git'
        dest: '{{ rbenv_root }}/plugins/ruby-build'
        accept_hostkey: yes
      when: 'plugin_installed is failed'

    - name: 'rbenv | check ruby {{ ruby_version }} installed'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv versions | grep {{ ruby_version }}'
      register: 'ruby_installed'
      ignore_errors: yes

    - name: 'rbenv | install ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv install --verbose {{ ruby_version }}'
      when: 'ruby_installed is failed'

    - name: 'rbenv | set global ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv global {{ ruby_version }}'
      when: 'ruby_installed is failed'

    - name: 'rbenv | rehash'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv rehash'
      when: 'ruby_installed is failed'

    - name: 'rbenv | create .gemrc'
      lineinfile: 'dest={{ home }}/.gemrc owner={{ user }} group={{ user }} mode=0644 line="gem: --no-ri --no-rdoc" create=yes'
      when: 'ruby_installed is failed'

    - name: 'ruby | install bundler'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv exec gem install bundler'
      when: 'ruby_installed is failed'

    - name: 'rbenv | change owner'
      shell: 'chown -R {{ user }}:{{ user }} {{ rbenv_root }}'
      when: 'ruby_installed is failed'

    # ====================================================
    # Link ruby to root user for CRON
    # ====================================================
    - name: 'ruby | check link for CRON'
      command: 'test -L /usr/bin/ruby'
      register: 'ruby_linked_for_cron'
      ignore_errors: yes

    - name: 'ruby | link for CRON'
      shell: 'ln -s {{ rbenv_root }}/ruby /usr/bin/ruby'
      when: 'ruby_linked_for_cron is failed'

    # ====================================================
    # Prepare shared folder
    # ====================================================
    - name: 'shared folder | check shared folder'
      command: 'test -x {{ application }}/shared'
      register: 'shared_folder_created'
      ignore_errors: yes

    - name: 'shared folder | create shared directory'
      shell: 'mkdir -p {{ application }}/shared -m 775 && mkdir -p {{ application }}/shared/config -m 775 && mkdir -p {{ application }}/shared/public -m 775 && chown -R {{ user }}:{{ user }} {{ home }}/apps'
      when: 'shared_folder_created is failed'

    # ====================================================
    # Create and setup postgresql database
    # ====================================================
    - name: 'postgresql | check user'
      shell: 'psql -U postgres -c "\copyright"'
      register: 'postgres_login'
      ignore_errors: yes

    - name: 'postgresql | set auth type'
      copy:
        src: configs/pg_hba.conf
        dest: /etc/postgresql/16/main/pg_hba.conf
        owner: postgres
        group: postgres
        mode: 0644
      when: 'postgres_login is failed'

    - name: 'postgresql | restart service'
      service: name=postgresql state=restarted
      when: 'postgres_login is failed'

    - name: 'postgresql | check database.yml'
      command: 'test -f {{ application }}/shared/config/database.yml'
      register: 'database_config_copied'
      ignore_errors: yes

    - name: 'postgresql | copy database.yml'
      template:
        src: configs/database.yml
        dest: '{{ application }}/shared/config/database.yml'
        owner: '{{ user }}'
        group: '{{ user }}'
        mode: '0644'
      when: 'database_config_copied is failed'

    - name: 'postgresql | create database'
      shell: 'createdb -U postgres -O postgres -E UTF8 -l en_US.UTF-8 -T template0 {{ name }}_production'
      when: 'database_config_copied is failed'

    # ====================================================
    # Setup all shared config files, secrets, keys, etc
    # ====================================================
    - name: 'secrets | check master.key'
      command: 'test -f {{ application }}/shared/config/master.key'
      register: 'mater_key_copied'
      ignore_errors: yes

    - name: 'secrets | copy master.key'
      template:
        src: ../../config/master.key
        dest: '{{ application }}/shared/config/master.key'
        owner: '{{ user }}'
        group: '{{ user }}'
        mode: '0644'
      when: 'mater_key_copied is failed'

    - name: 'secrets | check credentials'
      command: 'test -f {{ application }}/shared/config/credentials.yml.enc'
      register: 'credentials_key_copied'
      ignore_errors: yes

    - name: 'secrets | copy credentials'
      template:
        src: ../../config/credentials.yml.enc
        dest: '{{ application }}/shared/config/credentials.yml.enc'
        owner: '{{ user }}'
        group: '{{ user }}'
        mode: '0644'
      when: 'credentials_key_copied is failed'

    - name: 'sitemap | check sitemap.xml.gz'
      command: 'test -f {{ application }}/shared/public/sitemap.xml.gz'
      register: 'sitemap_copied'
      ignore_errors: yes

    - name: 'sitemap | create empty sitemap'
      template:
        src: configs/sitemap.xml.gz
        dest: '{{ application }}/shared/public/sitemap.xml.gz'
        owner: '{{ user }}'
        group: '{{ user }}'
        mode: '0644'
      when: 'sitemap_copied is failed'

    # ====================================================
    # sudo access without password for deployer
    # ====================================================
    - name: 'sudoers | add rules'
      shell: |
        echo '%deployer ALL=NOPASSWD:/bin/systemctl start puma_{{ name }}_production' >> /etc/sudoers
        echo '%deployer ALL=NOPASSWD:/bin/systemctl stop puma_{{ name }}_production' >> /etc/sudoers
        echo '%deployer ALL=NOPASSWD:/bin/systemctl restart puma_{{ name }}_production' >> /etc/sudoers

    # ====================================================
    # grant permission to deployer folder for nginx
    # ====================================================
    - name: 'deployer folder | add permissions'
      shell: 'chmod o=rx /home/deployer'

    # ====================================================
    # Puma service and app configs setup
    # ====================================================
    - name: 'puma | check service config'
      command: 'test -f /etc/systemd/system/puma_{{ name }}_production.service'
      register: 'puma_service_config_copied'
      ignore_errors: yes

    - name: 'puma | copy service config'
      template:
        src: configs/puma.service
        dest: '/etc/systemd/system/puma_{{ name }}_production.service'
        owner: 'root'
        group: 'root'
        mode: '0644'
      when: 'puma_service_config_copied is failed'

    - name: 'puma | start service'
      shell: 'sudo /bin/systemctl start puma_{{ name }}_production'
      when: 'puma_service_config_copied is failed'

    - name: 'puma | check app config'
      command: 'test -f {{ application }}/shared/config/puma.rb'
      register: 'puma_app_config_copied'
      ignore_errors: yes

    - name: 'puma | copy app config'
      template:
        src: configs/puma.rb
        dest: '{{ application }}/shared/config/puma.rb'
        owner: '{{ user }}'
        group: '{{ user }}'
        mode: '0644'
      when: 'puma_app_config_copied is failed'

    # ====================================================
    # NGINX config setup
    # ====================================================
    - name: 'nginx | check config'
      command: 'test -f /etc/nginx/sites-enabled/{{ name }}.conf'
      register: 'nginx_config_copied'
      ignore_errors: yes

    - name: 'nginx | createdir'
      shell: 'rm /etc/nginx/sites-enabled/default; mkdir -p /etc/nginx/sites-enabled/'
      when: 'nginx_config_copied is failed'

    - name: 'nginx | copy config'
      template:
        src: configs/nginx.conf
        dest: '/etc/nginx/sites-enabled/{{ name }}.conf'
        owner: 'root'
        group: 'root'
        mode: '0644'
      when: 'nginx_config_copied is failed'

    - name: 'nginx | restart service'
      service: name=nginx state=restarted
      when: 'nginx_config_copied is failed'
